?recognize
?lubridate
?if else
LeapYearFunction <- function (year) {
if (!is.numeric(year))
stop ("year must be numeric")
else if (year %% 4 == 0) ((year %% 100 != 0) | (year %% 400 == 0))
return (TRUE)
}
LeapYearFunction (2000)
LeapYearFunction (2001)
LeapYearFunction (2002)
LeapYearFunction (200123)
LeapYearFunction <- function (year) {
if (!is.numeric(year))
stop ("year must be numeric")
else if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0))
return (TRUE)
}
LeapYearFunction (200)
LeapYearFunction <- function (year) {
if (!is.numeric(year))
stop ("year must be numeric")
else if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0))
return (TRUE)
else
return (FALSE)
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (year "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (year "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (year "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (year, "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction (2000)
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0) + ((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
} if (year < 1800) {
return (is.character(year), "is out of the valid range")
}
}
LeapYearFunction <- function (year) {
LeapYearFunction <- function (year) {
LeapYearFunction <- function (year) {
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0)&((year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else {
return (FALSE)
}
# } if (year < 1800) {
#  return (is.character(year), "is out of the valid range")
# }
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0)&&(year %% 100 != 0) | (year %% 400 == 0)) {}
return (TRUE)
# } else {
#return (FALSE)
# } if (year < 1800) {
#  return (is.character(year), "is out of the valid range")
# }
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("year must be numeric")
} if (year %% 4 == 0)&&(year %% 100 != 0) | (year %% 400 == 0)) {}
return (TRUE)
}
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction (1400)
ls()
rm(list = ls())
LeapYearFunction(1568)
source('R/LeapYearFunction.R')
LeapYearFunction ()
year <- try(year, silent=TRUE)
LeapYearFunction <- function (year) {
year <- try(year, silent=TRUE)
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction ()
LeapYearFunction <- function (year) {
year <- try(year, silent=FALSE)
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction ()
LeapYearFunction(1568)
LeapYearFunction(1168)
LeapYearFunction <- function (year) {
#year <- try(year, silent=FALSE)
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction ()
LeapYearFunction(1168)
source('R/LeapYearFunction.R')
LeapYearFunction(1168)
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction ()
LeapYearFunction (1533)
LeapYearFunction(1168)
LeapYearFunction()
LeapYearFunction(2000)
LeapYearFunction(2001)
LeapYearFunction(1111)
LeapYearFunction()
LeapYearFunction(2000)
LeapYearFunction <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
LeapYearFunction(2000)
LeapYearFunction(1000)
LeapYearFunction(1400) #will return 'year is out of range'
LeapYearFunction("2000") #will warn 'class of argument year must be numeric'
LeapYearFunction(2001) #not a leap year, will return FALSE
LeapYearFunction(2000) #a leap year, will return TRUE
rm(list = ls())
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
source('R/LeapYearFunction.R')
cat ("\14")
source('R/LeapYearFunction.R')
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
is.leap(1400) #will return 'year is out of range'
is.leap("2000") #will warn 'class of argument year must be numeric'
is.leap(2001) #not a leap year, will return FALSE
is.leap(2000) #a leap year, will return TRUE
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
is.leap <- function (year=0) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
source('R/LeapYearFunction.R')
source('R/LeapYearFunction.R')
is.leap <- function (year=0) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
warning ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
is.leap <- function (year=0) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
print ('the year is out of range')
} else {
return (FALSE)
}
}
source('R/LeapYearFunction.R')
is.leap <- function (year=0) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
print ('the year is out of range')
} else {
return (FALSE)
}
}
source('R\LeapYearFunction.R')
source ('R/LeapYearFunction.R')
is.leap ()
is.leap <- function (year=0) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
print ('the year is out of range')
} else {
return (FALSE)
}
}
is.leap ()
is.leap (1)
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition
} else if (year <= 1581) {
print ('the year is out of range')
} else {
return (FALSE)
}
}
is.leap ()
source ('R/LeapYearFunction.R')
source ('R/LeapYearFunction.R')
source ('R/LeapYearFunction.R')
source ('R/LeapYearFunction.R')
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition to set the range of the valid years
} else if (year <= 1581) {
print ('the year is out of range')
#condition if the argument is not a leap year
} else {
return (FALSE)
}
}
source ('R/LeapYearFunction.R')
source ('R/LeapYearFunction.R')
#Function to test whether a particular year is a leap year or not year
is.leap <- function (year) {
if (!is.numeric(year)) {
stop ("class of argument year must be numeric") #class control condition
#test the conditions of a leap year: divisible by 4,  not divisible by 100 but is divisble by 400
} else if  ((year %% 4 == 0) && (year %% 100 != 0) | (year %% 400 == 0)) {
return (TRUE)
#condition to set the range of the valid years
} else if (year <= 1581) {
print ('the year is out of range')
#condition if the argument is not a leap year
} else {
return (FALSE)
}
}
warning ('function accepts numeric classes, simply use a certain year as argument')
source ('R/LeapYearFunction.R')
source('//wurnet.nl/Homes/araza001/My Documents/GRS 33806/GIT/Lesson3_TeamAA/LeapYearFunctionTeamAA.R', echo=TRUE)
source ('R/LeapYearFunction.R')
source ('R/LeapYearFunction.R')
